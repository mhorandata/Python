#This file is focused on important/useful Python code  
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#This Python code defines a dictionary named students with keys "male" and "female," each associated with a list of names. The code then iterates over the keys of the dictionary ("male" and "female") using a nested loop. 
#Inside the nested loop, it further iterates over the names in the corresponding list.
# 
# The conditional statement (if "a" in name) checks if the letter 'a' is present in each name. If a name contains the letter 'a,' it prints that name using the print statement.
# 
# In summary, the code loops through the dictionary of students, checks each name for the presence of the letter 'a,' and prints the names that meet this criterion.

#Here the dictionary named students is created.
students = {
    "male":["Tom", "Charlie", "Harry"],
    "female":["Sarah", "Huda", "Samantha"]
}
for key in students.keys():
    for name in students[key]:
        #the below code only prints out the names that have the letter a in the their name.
        if "a" in name:
            print(name)

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# In Python, list comprehension is a concise way to create lists. 
# It allows you to define a list and specify the conditions for including elements in that list in a single line of code. 
# The general syntax is [expression for item in iterable if condition].
# 
# Now, let's break down the provided code:


even = [x for x in range(1, 101) if x % 2 == 0]
print(even)

# even is the name of the list that will be created using list comprehension.
# 
# [x for x in range(1, 101) if x % 2 == 0]: This is the list comprehension expression. Let's break it down further:
# 
# for x in range(1, 101): It iterates over each value of x in the range from 1 to 100 (inclusive).
# 
# if x % 2 == 0: It checks whether the current value of x is even (divisible by 2).
# 
# x: The expression to be included in the list if the conditions are met. In this case, it's the variable x.
# 
# Putting it all together, this list comprehension creates a list (even) containing all even numbers from 1 to 100.
# 
# print(even): Finally, the print statement displays the resulting list of even numbers.
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
words = ["the", "quick,", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
answer = [[w.upper(), w.lower(), len(w)] for w in words]
print(answer)

# words: This is a list containing strings.
# 
# [[w.upper(), w.lower(), len(w)] for w in words]: This is a list comprehension expression. Breaking it down:
# 
# for w in words: It iterates over each word (w) in the list of words.
# 
# [w.upper(), w.lower(), len(w)]: This is the expression to be included in the new list. It creates a nested list for each word, where:
# 
# w.upper(): It converts the word to uppercase.
# 
# w.lower(): It converts the word to lowercase.
# 
# len(w): It calculates the length of the word.
# 
# Putting it all together, this list comprehension creates a list of lists (answer), where each inner list contains the uppercase version,
# lowercase version, and length of each word in the original list.
# 
# print(answer): This statement prints the resulting list of lists.
# 
# So, when you run this code, it will output a list of lists, where each inner list contains the uppercase version, 
# lowercase version, and length of each word in the original list.
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# This code is a simple Python program that translates a sentence into Pig Latin. Let's break down the code:
# 
# original = input("Please enter a sentence:").strip().lower(): This line prompts the user to enter a sentence, removes leading and trailing whitespaces using strip(), 
# and converts the sentence to lowercase using lower(). The cleaned input is stored in the variable original.
# 
# words = original.split(): This line splits the input sentence into a list of words using the split() method. The resulting list is stored in the variable words.
# 
# new_words = []: This initializes an empty list named new_words to store the translated words.
# 
# The code then uses a loop to iterate through each word in the words list:
# 
# a. If the first letter of the word is a vowel (if word[0] in "aeiou":), it appends the word with "yay" at the end to the new_words list.
# 
# b. If the word starts with a consonant, it identifies the position of the first vowel in the word using a nested loop. It then rearranges the word into Pig Latin by 
# moving the consonant cluster to the end and adding "ay". The translated word is appended to the new_words list.
# 
# The output = " ".join(new_word) line attempts to join the translated words into a single string with spaces in between. However, there is an indentation issue in the code,
# and this line is inside the loop. It should be outside the loop to join all the words.
# 
# Finally, the program prints the joined string of translated words.
# 

original = input("Please enter a sentence:").strip().lower()

words = original.split()
new_words = []

for word in words:
    if word[0] in "aeiou":
        new_word = word + "yay"
        new_words.append(new_word)
    else:
        vowel_pos = 0
        for letter in word:
            if letter not in "aeiou":
                vowel_pos = vowel_pos + 1
            else:
                break
        cons = word[:vowel_pos]
        the_rest = word[vowel_pos:]
        new_word = the_rest + cons + "ay"
        new_words.append(new_word)

output = " ".join(new_words)
print(output)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
choice = input("Choose either add, subtract, multiply, or divide: ")
num1 = float(input("Enter your first number: "))
num2 = float(input("Enter your second number: "))

if choice == "add":
    result = num1 + num2
    print(f"The sum of {num1} and {num2} is: {result}")
elif choice == "subtract":
    result = num1 - num2
    print(f"The difference of {num1} and {num2} is: {result}")
elif choice == "multiply":
    result = num1 * num2
    print(f"The product of {num1} and {num2} is: {result}")
elif choice == "divide":
    if num2 != 0:
        result = num1 / num2
        print(f"The division of {num1} by {num2} is: {result}")
    else:
        print("Error: Cannot divide by zero.")
else:
    print("Invalid input. Choose either add, subtract, multiply, or divide.")


# Break down the code line by line:
# choice = input("Choose either add, subtract, multiply, or divide: ")
# Prompts the user to enter their choice of operation (add, subtract, multiply, or divide).
# The user's input is stored in the variable choice.
#
# User Input for First Number:
# num1 = float(input("Enter your first number: "))
# Prompts the user to enter the first number.
# Converts the user's input to a floating-point number using float() and stores it in the variable num1.
#
# User Input for Second Number:
# num2 = float(input("Enter your second number: "))
# Prompts the user to enter the second number.
# Converts the user's input to a floating-point number using float() and stores it in the variable num2.
#
# Conditional Statements:
# if choice == "add":
#     result = num1 + num2
#     print(f"The sum of {num1} and {num2} is: {result}")
# elif choice == "subtract":
#     result = num1 - num2
#     print(f"The difference of {num1} and {num2} is: {result}")
# elif choice == "multiply":
#     result = num1 * num2
#     print(f"The product of {num1} and {num2} is: {result}")
# elif choice == "divide":
#     if num2 != 0:
#         result = num1 / num2
#         print(f"The division of {num1} by {num2} is: {result}")
#     else:
#         print("Error: Cannot divide by zero.")
# else:
#     print("Invalid input. Choose either add, subtract, multiply, or divide.")
# Checks the value of choice to determine which operation to perform.
# Calculates the result based on the chosen operation.
# Prints the result along with a descriptive message.
# Handles division by zero error by checking if num2 is not equal to 0.
# If the user's input for the operation is not one of the specified choices, it prints an error message.
#
# This code essentially acts as a basic calculator, taking user input for the operation and two numbers, performing the chosen operation, and displaying the result.
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def multiply(a, b):
    # Multiply the two numbers
    result = a * b
    # Return the result
    return result

# Test the function with the provided values
answer = multiply(5, 10)
print(answer)
# This code defines a function called multiply that takes two parameters (a and b) and returns their product. 
# The function is then called with the values 5 and 10, and the result is printed. If you run this code, it should output 50, which is the product of 5 and 10.
