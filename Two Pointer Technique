# Imagine a warehouse with labeled packages, and you have two clipboards: Clipboard1 and Clipboard2.
# Each clipboard contains a list of items arranged in the same order as the packages in the warehouse.
# Your goal is to efficiently find a specific item.
#
# Initialization:
#
# Clipboard1 starts at the first item on the list.
# Clipboard2 starts at the last item on the list.
# Searching Process:
#
# You (the searcher) look at the items indicated by both clipboards simultaneously.
# If the item on Clipboard1 matches the desired one, success!
# If the item on Clipboard1 is smaller, move Clipboard1 to the next item.
# If the item on Clipboard2 is larger, move Clipboard2 to the previous item.
# Efficiency:
#
# By using two clipboards, you can quickly narrow down the search range, much like the two-pointer technique.
#------------------------------------------------------------------------------------------------------------------------------

# Now, let's translate this into code:

def search_item(item_list, target):
    clipboard1 = 0
#The -1 in the cliboard2 below is starting at the end. 
#With clipboard1 starting at the beginning this increases efficiency by checking both ends until
#you meet in the middle making it more likely to find the results without overlapping the search.
    clipboard2 = len(item_list) - 1
# The reason clipboard2 is meant to be bigger in the while code below is that when it started at the end 
#(-1) the number position defaults to the highest (the back of the list) at first going down each time 
#(for example, if there are 5 items in the array clipboard2 would be = 4 at first and clipboard1 would be equal to 0 at first.
    while clipboard1 < clipboard2:
        current_sum = item_list[clipboard1] + item_list[clipboard2]

#The below if statement first checks to see if 

        if current_sum == target:
            return True  # Item found
        elif current_sum < target:
            clipboard1 += 1
        else:
            clipboard2 -= 1

    return False  # Item not found
# In this example, item_list represents the list of items in the warehouse,
# and target is the desired item. The search_item function efficiently searches for the item using the two-clipboard approach.

#------------------------------------------------------------------------------------------------------------------------------
# Let's break down the provided code line by line:
#
# Function Declaration:
# def search_item(item_list, target):
# Declares a function named search_item that takes two parameters: item_list (a list of items) and target (the desired sum).


# Initialization of Pointers:
# clipboard1 = 0
# clipboard2 = len(item_list) - 1
# Initializes two pointers (clipboard1 and clipboard2) at the beginning and end of the item_list, respectively.

# While Loop for Searching:
# while clipboard1 < clipboard2:
# Initiates a while loop that continues as long as clipboard1 is less than clipboard2, ensuring the pointers do not overlap.

# Calculating Current Sum:
# current_sum = item_list[clipboard1] + item_list[clipboard2]
# Calculates the sum of the items at the positions indicated by clipboard1 and clipboard2.

# Checking for Target:
# if current_sum == target:
#     return True  # Item found
# Checks if the current sum equals the target. If true, it means the desired sum is found, and the function returns True.

# Adjusting Pointers:
# elif current_sum < target:
#     clipboard1 += 1
# else:
#     clipboard2 -= 1
# Adjusts the pointers based on the comparison of the current sum with the target. If the current sum is less than the target,
# clipboard1 moves to the next item; otherwise, clipboard2 moves to the previous item.

# Returning False if Item Not Found:
# return False  # Item not found
# If the while loop completes without finding the target sum,
# the function returns False to indicate that the item is not found in the given item_list.
# This code represents a two-pointer technique for efficiently searching for a target sum in a sorted list.
# The pointers move towards each other to narrow down the search range.
