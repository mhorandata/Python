#Python: Read, Update, and Display Excel Database in Console using Pandas, Numpy and Openpyxl

#--------------------------------------------------------------------------------------------------------------------------------------------------------------
#Pre-installment instructions:
# 1. Pandas:
# Pandas is a powerful Python library for data manipulation and analysis.
# It provides data structures like Series and DataFrame, allowing you to efficiently manipulate large datasets.
# Pandas simplifies tasks such as cleaning, filtering, and aggregating data.
#
# 2. NumPy:
# NumPy is a fundamental package for scientific computing in Python.
# It provides support for large, multi-dimensional arrays and matrices, along with mathematical functions to operate on these arrays.
# NumPy is essential for tasks involving numerical data and is the foundation for many other scientific computing libraries.
#
# 3. openpyxl:
# openpyxl is a Python library for reading and writing Excel (xlsx) files.
# It allows you to work with Excel files, including creating, modifying, and extracting data.
# openpyxl is particularly useful for tasks related to data stored in Excel spreadsheets.
#
# Installation:
# Pandas:
# To install Pandas, use the following command:
# pip install pandas
#
# NumPy:
# NumPy can be installed using:
# pip install numpy
#
# openpyxl:
# For openpyxl, you can install it with:
# pip install openpyxl
#
# Make sure you have Python and pip installed on your system before running these commands.
# If not, you can download Python from python.org and pip will be included.

#--------------------------------------------------------------------------------------------------------------------------------------------------------------
import pandas as pd
import numpy as np

data = np.array([['', 'Col1', 'Col2'],
                ['Row1', 1, 2],
                ['Row2', 3, 4],
                ['Row3', 5, 6],
                ['Row4', 7, 8]])

# Create DataFrame using the first row as header and excluding the first column
df = pd.DataFrame(data[1:, 1:], index=data[1:, 0], columns=data[0, 1:])

# Print the DataFrame
print(df)

#--------------------------------------------------------------------------------------------------------------------------------------------------------------

# Explanation:
# 1. Importing Libraries:
#
# python
# Copy code
# import pandas as pd
# import numpy as np
# Explanation: This code imports the Pandas library and assigns it the alias "pd".
# It also imports the NumPy library and assigns it the alias "np". Aliases are commonly used to make the code shorter.
# 2. Creating a NumPy Array:
#
# python
# Copy code
# data = np.array([['', 'Col1', 'Col2'],
#                  ['Row1', 1, 2],
#                  ['Row2', 3, 4],
#                  ['Row3', 5, 6],
#                  ['Row4', 7, 8]])
# Explanation: This code creates a 2D NumPy array called "data" that represents a table.
# The first row contains column names ('', 'Col1', 'Col2'), and subsequent rows contain data.
# 3. Creating a Pandas DataFrame:
#
# python
# Copy code
# df = pd.DataFrame(data[1:, 1:], index=data[1:, 0], columns=data[0, 1:])
# Explanation: This code creates a Pandas DataFrame called "df" from the NumPy array "data".
# It uses slices of the array to exclude the first row and first column,
# setting the first row as the index and the first row's elements (excluding the first element) as column names.
# 4. Printing the DataFrame:
#
# python
# Copy code
# print(df)
# Explanation: This code prints the Pandas DataFrame "df" to the console.
# Installing Pandas and NumPy:
# To install Pandas and NumPy, open your command line or terminal and run the following commands:
#
# bash
# Copy code
# pip install pandas
# pip install numpy
# Why Use Pandas and NumPy Together for Data Analytics:
#
# Pandas provides high-level data structures like DataFrame, making it easy to manipulate and analyze tabular data.
# NumPy is excellent for numerical operations and provides support for multi-dimensional arrays.
# Together, they enable efficient data manipulation, cleaning, and analysis in tasks such as data exploration, statistical analysis, and machine learning.

#--------------------------------------------------------------------------------------------------------------------------------------------------------------

#To create a longer array list using a loop,
# you can modify the code to dynamically generate data and then construct the DataFrame.
# Here's an updated version of your code:

import pandas as pd
import numpy as np

# Initialize an empty list to store rows
rows = []

# Loop to generate data and append rows starting from Row1
for i in range(1, 11):  # Adjust the range for the desired number of rows starting from 1
    row = [f'Row{i}', (i - 1) * 2 + 1, i * 2]  # Adjusted row creation logic
    rows.append(row)

# Convert the list of rows to a NumPy array
data = np.array([['', 'Col1', 'Col2']] + rows)

# Create DataFrame using the first row as header and excluding the first column
df = pd.DataFrame(data[1:, 1:], index=data[1:, 0], columns=data[0, 1:])

# Print the DataFrame
print(df)

#--------------------------------------------------------------------------------------------------------------------------------------------------------------

# Explanation:

# An empty list rows is initialized to store the rows of the DataFrame.
# A loop is used to generate data for each row dynamically. Adjust the loop range for the desired number of rows.
# Each row is constructed as a list and appended to the rows list.
# The list of rows is converted to a NumPy array, including the header.
# The DataFrame is created using the array, and the first row is set as the index while excluding the first column.
# The resulting DataFrame is printed.
# This updated code allows you to easily control the length of the array list by adjusting the loop range.

#--------------------------------------------------------------------------------------------------------------------------------------------------------------

# To read data from an Excel workbook and display it in the Python console,
# you can use the pd.read_excel function from the Pandas library. Here's the updated code:
import os
import pandas as pd

# Install openpyxl if not already installed
# You can run this in your terminal or command prompt
# pip install openpyxl

# Specify the absolute path to the Excel workbook
excel_path = os.path.abspath(r'C:\Users\mhora\Desktop\Programming\Python\DataFrameProject\DataFrameProject.xlsx')

# Read existing data from the Excel workbook
df = pd.read_excel(excel_path, engine='openpyxl', header=None)

# Print the original DataFrame with "Row" and "Col" prefixes, only for columns A and B
print("Original DataFrame:")
df.index = [f'Row {i + 1}' for i in df.index]
df.columns = [f'Col {i + 1}' for i in df.columns]
print(df[['Col 1', 'Col 2']])  # Selecting only columns A and B

# Specify the starting row and column to write to in the Excel file
startrow = 0
startcol = 0

# Create a variable for the A1 range
a1_range = (0, df.columns.get_loc('Col 1'))

# Update A1 to 7 using the A1 range
df.iat[a1_range[0], a1_range[1]] = 7

# Write the updated DataFrame (only columns A and B) to the Excel workbook
with pd.ExcelWriter(excel_path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
    df[['Col 1', 'Col 2']].to_excel(writer, header=None, index=None, startrow=startrow, startcol=startcol)

# Read data from the updated Excel workbook, starting from the first row and treating it as data (including headers)
df_updated = pd.read_excel(excel_path, engine='openpyxl', header=None)

# Print the updated DataFrame with "Row" and "Col" prefixes, only for columns A and B
print("\nUpdated DataFrame:")
df_updated.index = [f'Row {i + 1}' for i in df_updated.index]
df_updated.columns = [f'Col {i + 1}' for i in df_updated.columns]
print(df_updated[['Col 1', 'Col 2']])  # Selecting only columns A and B





#--------------------------------------------------------------------------------------------------------------------------------------------------------------
# Explanation:
#
#1. import os: Imports the Python module "os," which provides a way to interact with the operating system, such as working with file paths.
#
#2. import pandas as pd: Imports the pandas library with the alias "pd," commonly used for data manipulation and analysis.
#
#3. Comment: # Install openpyxl if not already installed: A comment explaining the next line is a command to install the "openpyxl"
# library if it's not already installed.
#
#4. Command: # pip install openpyxl: A command to install the "openpyxl" library using the pip package manager.
#
#5. Comment: # Specify the absolute path to the Excel workbook: Describes the following line, which sets the absolute path of the Excel workbook.
#
#6. excel_path = os.path.abspath(r'C:\Users\mhora\Desktop\Programming\Python\DataFrameProject\DataFrameProject.xlsx'):
# Defines the absolute path of the Excel workbook using the os module.
#
#7. Comment: # Read existing data from the Excel workbook: Provides context for the following line, which reads data from the Excel workbook.
#
#8. df = pd.read_excel(excel_path, engine='openpyxl', header=None): Reads data from the Excel workbook into a pandas DataFrame (df).
# It uses the openpyxl engine and specifies no headers in the DataFrame.
#
#9. Comment: # Print the original DataFrame with "Row" and "Col" prefixes, only for columns A and B: Describes the following lines,
# which format and print the original DataFrame.
#
#10. print("Original DataFrame:"): Prints a label for the original DataFrame.
#
#11. df.index = [f'Row {i + 1}' for i in df.index]: Renames the index of the DataFrame, adding "Row" prefix.
#
#12. df.columns = [f'Col {i + 1}' for i in df.columns]: Renames the columns of the DataFrame, adding "Col" prefix.
#
#13. print(df[['Col 1', 'Col 2']]): Prints only the selected columns ('Col 1' and 'Col 2') of the DataFrame.
#
#14. Comment: # Specify the starting row and column to write to in the Excel file: Describes the following lines,
# which set the starting position for writing to the Excel file.
#
#15. startrow = 0: Sets the starting row to 0.
#
#16. startcol = 0: Sets the starting column to 0.
#
#17. Comment: # Create a variable for the A1 range: Describes the following line, which creates a variable representing the A1 cell.
#
#18. a1_range = (0, df.columns.get_loc('Col 1')): Creates a tuple (a1_range) with the row and column indices of the A1 cell.
#
#20. Comment: # Update A1 to 7 using the A1 range: Describes the following line, which updates the value of the A1 cell to 7.
#
#21. df.iat[a1_range[0], a1_range[1]] = 7: Uses the iat indexer to update the value at the specified A1 cell.
#
#22. Comment: # Write the updated DataFrame (only columns A and B) to the Excel workbook: Describes the following lines,
# which write the updated DataFrame to the Excel workbook.
#
#23. with pd.ExcelWriter(excel_path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer::
# Opens the Excel workbook for writing using the openpyxl engine.
#
#24. df[['Col 1', 'Col 2']].to_excel(writer, header=None, index=None, startrow=startrow, startcol=startcol):
# Writes the selected columns of the DataFrame to the Excel file.
#
#25. Comment: # Read data from the updated Excel workbook, starting from the first row and treating it as data
# (including headers): Describes the following line, which reads data from the updated Excel workbook.
#
#26. df_updated = pd.read_excel(excel_path, engine='openpyxl', header=None): Reads data from the updated Excel workbook into a new DataFrame (df_updated).
#
#27. Comment: # Print the updated DataFrame with "Row" and "Col" prefixes, only for columns A and B:
# Describes the following lines, which format and print the updated DataFrame.
#
#28. print("\nUpdated DataFrame:"): Prints a label for the updated DataFrame.
#
#29. df_updated.index = [f'Row {i + 1}' for i in df_updated.index]: Renames the index of the updated DataFrame, adding "Row" prefix.
#
#30. df_updated.columns = [f'Col {i + 1}' for i in df_updated.columns]: Renames the columns of the updated DataFrame, adding "Col" prefix.
#
#31. print(df_updated[['Col 1', 'Col 2']]): Prints only the selected columns ('Col 1' and 'Col 2') of the updated DataFrame.
#
#32. This code reads data from an Excel file, updates a specific cell, and then writes the modified data back to the same file.
# It also prints the original and updated DataFrames for visualization.
