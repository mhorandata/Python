import random

# Generate a random number between 1 and 100
secret_number = random.randint(1, 100)

# Initialize the number of guesses and an empty list to store guesses
guesses = 0
guess_list = []

print("Welcome to the Number Guessing Game!")
print("You have 10 tries to guess the secret number between 1 and 100.")

while guesses < 10:
    try:
        # Get the user's guess
        guess = int(input("Enter your guess: "))

        # Check if the guess is valid (between 1 and 100)
        if guess < 1 or guess > 100:
            print("Please enter a number between 1 and 100.")
            continue

        # Check if the guess has been guessed before
        if guess in guess_list:
            print("You've already guessed that number. Try a different one.")
            continue

        guesses += 1
        guess_list.append(guess)

        # Compare the guess with the secret number
        if guess < secret_number:
            print("Try a higher number.")
        elif guess > secret_number:
            print("Try a lower number.")
        else:
            print(f"Congratulations! You've guessed the secret number ({secret_number}) in {guesses} tries!")
            break

        if guesses == 10:
            print(f"Game Over! The secret number was {secret_number}. You've run out of guesses.")

    except ValueError:
        print("Invalid input. Please enter a valid number.")


# 1. `import random`: This line imports the `random` module, which provides functions to generate random numbers. We'll use this module to generate the secret number.

# 2. `secret_number = random.randint(1, 100)`: This line generates a random integer between 1 and 100 (inclusive) and assigns it to the variable `secret_number`. This is the number the player needs to guess.

# 3. `guesses = 0`: This line initializes the variable `guesses` to 0. It will be used to keep track of the number of guesses the player has made.

# 4. `guess_list = []`: This line initializes an empty list called `guess_list`. This list will be used to store the player's previous guesses to check for duplicates.

# 5. `print("Welcome to the Number Guessing Game!")`: This line prints a welcome message to the user.

# 6. `print("You have 10 tries to guess the secret number between 1 and 100.")`: This line provides information to the user about the game rules.

# 7. The code enters a `while` loop, which will keep running as long as `guesses` is less than 10, allowing the player 10 guesses.

# 8. `try:`: This line starts a `try` block, which is used to handle exceptions (in this case, input errors).

# 9. `guess = int(input("Enter your guess: "))`: This line prompts the user to enter their guess and stores the input as an integer in the variable `guess`.

# 10. The code checks if the user's guess is within the valid range (between 1 and 100) using an `if` statement.

# 11. The code checks if the user has already guessed the same number by looking in the `guess_list`.

# 12. If the guess is valid and not a duplicate, the code increments the `guesses` count by 1 and appends the guess to the `guess_list`.

# 13. The code then checks if the guess is too low, too high, or correct by comparing it to the `secret_number`.

# 14. If the guess is lower or higher, a message is displayed to provide feedback to the player.

# 15. If the guess is correct, a congratulations message is displayed with the secret number and the number of guesses it took, and the game exits the `while` loop using the `break` statement.

# 16. If the player reaches 10 guesses without guessing the correct number, a "Game Over" message is displayed with the secret number.

# 17. `except ValueError:`: If the player enters something that can't be converted to an integer, a `ValueError` exception is caught, and an error message is displayed.

# The code repeats this process until the player either guesses the secret number or uses up their 10 allowed guesses.

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#List Guide
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#In Python, a list is a commonly used data structure that allows you to store and manage collections of items. Lists can contain a mix of different types of data, such as numbers, strings, and even other lists. Here's a comprehensive guide on working with lists in Python, including how to create, update, and manipulate them:

# **Creating a List:**
# To create a list in Python, you simply enclose your items within square brackets `[]`. For example:

# ```python
# my_list = [1, 2, 3, 4, 5]
# ```

# This creates a list called `my_list` containing five integers.

# **Accessing Elements:**
# You can access individual elements in a list using their index. Python uses a zero-based index, meaning the first element is at index 0, the second at index 1, and so on. To access an element, use square brackets and the index:

# ```python
# first_element = my_list[0]  # Access the first element
# second_element = my_list[1]  # Access the second element
# ```

# **Updating Elements:**
# Lists in Python are mutable, which means you can change their contents. To update a specific element in a list, you assign a new value to it:

# ```python
# my_list[0] = 10  # Update the first element to 10
# ```

# **Adding Elements:**
# You can add elements to the end of a list using the `append` method:

# ```python
# my_list.append(6)  # Adds the value 6 to the end of the list
# ```

# You can also insert an element at a specific position using the `insert` method:

# ```python
# my_list.insert(2, 7)  # Inserts the value 7 at index 2
# ```

# **Removing Elements:**
# To remove elements, you can use methods like `remove`, `pop`, or the `del` statement. For example:

# ```python
# my_list.remove(3)  # Removes the first occurrence of 3
# popped_value = my_list.pop(2)  # Removes and returns the element at index 2
# del my_list[1]  # Deletes the element at index 1
# ```

# **List Slicing:**
# You can create sublists (slices) of a list by specifying a range of indices. This is done using the colon `:`. For example:

# ```python
# sublist = my_list[1:4]  # Creates a new list with elements from index 1 to 3
# ```

# **List Methods:**
# Python offers various built-in methods for working with lists. Some commonly used methods include `sort`, `reverse`, and `len`:

# ```python
# my_list.sort()  # Sorts the list in ascending order
# my_list.reverse()  # Reverses the order of elements in the list
# length = len(my_list)  # Returns the number of elements in the list
# ```

# **Iterating Through a List:**
# You can use loops to go through all the elements in a list. A common way to do this is with a `for` loop:

# ```python
# for item in my_list:
#     print(item)  # Prints each element in the list
# ```
