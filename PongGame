from turtle import Turtle, Screen
import time

# Variable to control the while loop
running = True

# Function to change the variable when the screen is clicked
def on_click(x, y):
    global running
    running = False

# Ball class
class Ball(Turtle):

    def __init__(self):
        super().__init__()
        self.color("white")
        self.shape("circle")
        self.penup()
        self.x_move = 0.2
        self.y_move = 0.2
        self.move_speed = 0.1

    def move(self):
        new_x = self.xcor() + self.x_move
        new_y = self.ycor() + self.y_move
        self.goto(new_x, new_y)

    def bounce_y(self):
        self.y_move *= -1

    def bounce_x(self):
        self.x_move *= -1
        self.move_speed *= 0.9

    def reset_position(self):
        self.goto(0, 0)
        self.move_speed = 0.1
        self.bounce_x()

# Paddle class
class Paddle(Turtle):

    def __init__(self, position):
        super().__init__()
        self.shape("square")
        self.color("white")
        self.shapesize(stretch_wid=5, stretch_len=1)
        self.penup()
        self.goto(position)

    def go_up(self):
        new_y = self.ycor() + 30
        self.goto(self.xcor(), new_y)

    def go_down(self):
        new_y = self.ycor() - 30
        self.goto(self.xcor(), new_y)

# Scoreboard class
class Scoreboard(Turtle):

    def __init__(self):
        super().__init__()
        self.color("white")
        self.penup()
        self.hideturtle()
        self.l_score = 0
        self.r_score = 0
        self.update_scoreboard()

    def update_scoreboard(self):
        self.clear()
        self.goto(-100, 200)
        self.write(self.l_score, align="center", font=("Courier", 80, "normal"))
        self.goto(100, 200)
        self.write(self.r_score, align="center", font=("Courier", 80, "normal"))

    def l_point(self):
        self.l_score += 1
        self.update_scoreboard()

    def r_point(self):
        self.r_score += 1
        self.update_scoreboard()

# Game setup
screen = Screen()
screen.bgcolor("black")
screen.setup(width=800, height=600)
screen.title("Pong")
screen.tracer(0)

r_paddle = Paddle((350, 0))
l_paddle = Paddle((-350, 0))
ball = Ball()
scoreboard = Scoreboard()

# Bind the click event to change the running variable
screen.onclick(on_click)

screen.listen()
screen.onkey(r_paddle.go_up, "Up")
screen.onkey(r_paddle.go_down, "Down")
screen.onkey(l_paddle.go_up, "w")
screen.onkey(l_paddle.go_down, "s")

while running:
    screen.update()
    ball.move()

    # Detect collision with wall
    if ball.ycor() > 280 or ball.ycor() < -280:
        ball.bounce_y()

    # Detect collision with paddle
    if (ball.distance(r_paddle) < 50 and ball.xcor() > 320) or (ball.distance(l_paddle) < 50 and ball.xcor() < -320):
        ball.bounce_x()

    # Detect R paddle misses
    if ball.xcor() > 380:
        ball.reset_position()
        scoreboard.l_point()

    # Detect L paddle misses
    if ball.xcor() < -380:
        ball.reset_position()
        scoreboard.r_point()

# If the loop is exited, close the screen
screen.bye()

#
# 1. `from turtle import Turtle, Screen`: Import the `Turtle` and `Screen` classes from the `turtle` module, which is used for creating graphics.
#
# 2. `import time`: Import the `time` module, which provides various time-related functions.
#
# 3. `running = True`: Initialize a variable `running` to `True`. This variable is used to control the while loop later in the code.
#
# 4. `def on_click(x, y):`: Define a function `on_click` that takes the coordinates `(x, y)` as parameters.
#
# 5. `global running`: Declare the variable `running` as a global variable within the function.
#
# 6. `running = False`: Set the global variable `running` to `False` when the function is called. This is intended to exit the while loop.
#
# 7. `class Ball(Turtle):`: Define a class named `Ball` that inherits from the `Turtle` class.
#
# 8. `super().__init__()`: Call the constructor of the superclass (`Turtle`) to initialize the ball.
#
# 9. Set various attributes for the ball, such as color, shape, initial position, and movement speed.
#
# 10. `def move(self):`: Define a method `move` for the ball class, which updates the ball's position based on its current coordinates and movement speed.
#
# 11. `def bounce_y(self):`: Define a method `bounce_y` to reverse the vertical direction of the ball's movement.
#
# 12. `def bounce_x(self):`: Define a method `bounce_x` to reverse the horizontal direction of the ball's movement and reduce its speed.
#
# 13. `def reset_position(self):`: Define a method `reset_position` to reset the ball's position and speed when it goes out of bounds.
#
# 14. `class Paddle(Turtle):`: Define a class named `Paddle` that inherits from the `Turtle` class.
#
# 15. Similar to the `Ball` class, initialize the paddle's attributes.
#
# 16. Define methods `go_up` and `go_down` to move the paddle up and down, respectively.
#
# 17. `class Scoreboard(Turtle):`: Define a class named `Scoreboard` that inherits from the `Turtle` class.
#
# 18. Initialize attributes for the scoreboard, including scores for the left (`l_score`) and right (`r_score`) paddles.
#
# 19. Define a method `update_scoreboard` to display the scores on the screen.
#
# 20. Define methods `l_point` and `r_point` to update the scores when a point is scored.
#
# 21. `screen = Screen()`: Create a screen object using the `Screen` class.
#
# 22. Configure the screen's background color, dimensions, and title.
#
# 23. `r_paddle = Paddle((350, 0))`: Create the right paddle at the specified initial position.
#
# 24. `l_paddle = Paddle((-350, 0))`: Create the left paddle at the specified initial position.
#
# 25. `ball = Ball()`: Create the ball.
#
# 26. `scoreboard = Scoreboard()`: Create the scoreboard.
#
# 27. `screen.onclick(on_click)`: Bind the click event to the `on_click` function.
#
# 28. `screen.listen()`: Enable the screen to listen for keyboard events.
#
# 29. Bind paddle movement functions to specific keys.
#
# 30. Enter a while loop (`while running:`) that continuously updates the screen, moves the ball, and checks for collisions and paddle misses.
#
# 31. If certain conditions are met (ball out of bounds or collision with paddles), reset the ball position and update the scoreboard.
#
# 32. If the loop is exited, close the screen (`screen.bye()`).
#
# This code essentially creates a simple Pong game using the `turtle` module in Python. The while loop runs until the `running` variable is set to `False` by clicking on the screen.
